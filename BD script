--Script utilizado para la creacion del usuario - Imagen Docker (MAC)

ALTER SESSION SET CONTAINER = ORCLPDB1;

CREATE USER PROY_FINAL_BD IDENTIFIED BY "123"
DEFAULT TABLESPACE USERS
QUOTA UNLIMITED ON USERS;

GRANT CONNECT, RESOURCE TO PROY_FINAL_BD;

-- Crear tablas principales (sin dependencias/relaciones)
--Hola 
-- Tabla Empleados
CREATE TABLE Empleados (
    id_empleado NUMBER(10) PRIMARY KEY,
    nombre VARCHAR2(100),
    apellidos VARCHAR2(100),
    telefono VARCHAR2(15),
    correo VARCHAR2(100),
    username VARCHAR2(50) UNIQUE NOT NULL,
    password_hash VARCHAR2(128) NOT NULL
);

-- Tabla Roles
CREATE TABLE Roles (
    id_rol NUMBER(10) PRIMARY KEY,
    nombre_rol VARCHAR2(100)
);

-- Tabla Especies
CREATE TABLE Especies (
    id_especie NUMBER(10) PRIMARY KEY,
    nombre_cientifico VARCHAR2(100),
    familia VARCHAR2(50),
    habitat_natural VARCHAR2(200),
    estado_conservacion VARCHAR2(50), -- En peligro, Vulnerable, etc.
    dieta VARCHAR2(100) -- Carnívoro, Herbívoro, Omnívoro
);

-- Tabla Medicamentos
CREATE TABLE Medicamentos (
    id_medicamento NUMBER(10) PRIMARY KEY,
    nombre_medicamento VARCHAR2(100),
    tipo_medicamento VARCHAR2(50),
    stock_actual NUMBER(5),
    fecha_vencimiento DATE,
    proveedor VARCHAR2(100),
    ubicacion_almacen VARCHAR2(50)
);

-- ================================================================
-- Crear tablas con una dependencia/relacion
-- ================================================================

-- Tabla Empleados_Roles (depende de Empleados y Roles)
CREATE TABLE Empleados_Roles (
    id_empleado NUMBER(10),
    id_rol NUMBER(10),
    nivel_acceso NUMBER(1), -- 1=Básico, 2=Intermedio, 3=Total
    zona_asignada VARCHAR2(100),
    especialidad_medica VARCHAR2(100),
    area_asignada VARCHAR2(100),
    cargo VARCHAR2(100),
    PRIMARY KEY (id_empleado, id_rol),
    FOREIGN KEY (id_empleado) REFERENCES Empleados(id_empleado),
    FOREIGN KEY (id_rol) REFERENCES Roles(id_rol)
);

-- Tabla Rescates (depende de Empleados)
CREATE TABLE Rescates (
    id_rescate NUMBER(10) PRIMARY KEY,
    fecha_rescate DATE,
    lugar VARCHAR2(150),
    detalles VARCHAR2(250),
    id_rescatista NUMBER(10),
    FOREIGN KEY (id_rescatista) REFERENCES Empleados(id_empleado)
);

-- Tabla Animales (depende de Especies y Rescates)
CREATE TABLE Animales (
    id_animal NUMBER(10) PRIMARY KEY,
    nombre VARCHAR2(100),
    id_especie NUMBER(10),
    raza VARCHAR2(50),
    edad NUMBER(3),
    sexo VARCHAR2(10),
    id_rescate NUMBER(10),
    FOREIGN KEY (id_especie) REFERENCES Especies(id_especie),
    FOREIGN KEY (id_rescate) REFERENCES Rescates(id_rescate)
);

-- ================================================================
-- Crear tablas con múltiples dependencias/relaciones
-- ================================================================

-- Tabla Estados_Salud (depende de Animales y Empleados)
CREATE TABLE Estados_Salud (
    id_estado_salud NUMBER(10) PRIMARY KEY,
    id_animal NUMBER(10),
    fecha_evaluacion DATE,
    tipo_problema VARCHAR2(200),
    diagnostico VARCHAR2(500),
    estado VARCHAR2(50), -- Enfermo, Saludable, Herido, etc.
    id_veterinario NUMBER(10),
    FOREIGN KEY (id_animal) REFERENCES Animales(id_animal),
    FOREIGN KEY (id_veterinario) REFERENCES Empleados(id_empleado)
);

-- Tabla Tratamientos (depende de Animales y Empleados)
CREATE TABLE Tratamientos (
    id_tratamiento NUMBER(10) PRIMARY KEY,
    id_animal NUMBER(10),
    id_veterinario NUMBER(10),
    id_cuidador NUMBER(10),
    fecha_inicio DATE,
    fecha_fin DATE, -- NULL mientras esta en cuidados
    descripcion_tratamiento VARCHAR2(500),
    observaciones_cuidado VARCHAR2(300),
    estado_tratamiento VARCHAR2(50), -- En tratamiento, Completado
    FOREIGN KEY (id_animal) REFERENCES Animales(id_animal),
    FOREIGN KEY (id_veterinario) REFERENCES Empleados(id_empleado),
    FOREIGN KEY (id_cuidador) REFERENCES Empleados(id_empleado)
);

-- Estandarizaion del estado_tratamiento para que tenga 3 tipos de estados: PENDIENTE, EN_TRATAMIENTO y COMPLETADO
UPDATE Tratamientos 
SET estado_tratamiento = 'PENDIENTE' 
WHERE UPPER(estado_tratamiento) LIKE '%PENDIENTE%' 
   OR UPPER(estado_tratamiento) LIKE '%ESPERA%';

UPDATE Tratamientos 
SET estado_tratamiento = 'EN_TRATAMIENTO' 
WHERE UPPER(estado_tratamiento) LIKE '%TRATAMIENTO%' 
   OR UPPER(estado_tratamiento) LIKE '%ACTIVO%';

UPDATE Tratamientos 
SET estado_tratamiento = 'COMPLETADO' 
WHERE UPPER(estado_tratamiento) LIKE '%COMPLETADO%' 
   OR UPPER(estado_tratamiento) LIKE '%TERMINADO%'
   OR UPPER(estado_tratamiento) LIKE '%FINALIZADO%';

-- Agregamos regla para validar solo valores permitidos
ALTER TABLE Tratamientos 
ADD CONSTRAINT chk_estado_tratamiento 
CHECK (estado_tratamiento IN ('PENDIENTE', 'EN_TRATAMIENTO', 'COMPLETADO'));

-- Establecemos el valor PENDIENTE por defecto
ALTER TABLE Tratamientos 
MODIFY estado_tratamiento DEFAULT 'PENDIENTE';


-- Estandarización de la tabla Estados_Salud para que tenga 4 tipos de estados específicos
-- Los estados permitidos son: Enfermo, Saludable, Herido, En recuperación

-- Actualizar registros existentes a los valores estandarizados
UPDATE Estados_Salud 
SET estado = 'Enfermo' 
WHERE UPPER(estado) LIKE '%ENFERM%';

UPDATE Estados_Salud 
SET estado = 'Saludable' 
WHERE UPPER(estado) LIKE '%SALUDABLE%' 
   OR UPPER(estado) LIKE '%SANO%';

UPDATE Estados_Salud 
SET estado = 'Herido' 
WHERE UPPER(estado) LIKE '%HERIDO%' 
   OR UPPER(estado) LIKE '%LESION%';

UPDATE Estados_Salud 
SET estado = 'En recuperación' 
WHERE UPPER(estado) LIKE '%RECUPER%';

-- Agregamos constraint para validar solo valores permitidos
ALTER TABLE Estados_Salud 
ADD CONSTRAINT chk_estado_salud 
CHECK (estado IN ('Enfermo', 'Saludable', 'Herido', 'En recuperación'));

-- Establecemos el valor 'Enfermo' por defecto
ALTER TABLE Estados_Salud 
MODIFY estado DEFAULT 'Enfermo';



-- Tabla Tratamiento_Medicamentos (depende de Tratamientos y Medicamentos)
CREATE TABLE Tratamiento_Medicamentos (
    id_tratamiento NUMBER(10),
    id_medicamento NUMBER(10),
    dosis VARCHAR2(100), -- Ej: "5mg cada 8 horas"
    fecha_inicio_medicamento DATE, -- Puede ser diferente al inicio del tratamiento
    fecha_fin_medicamento DATE, -- Puede terminar antes que el tratamiento
    PRIMARY KEY (id_tratamiento, id_medicamento),
    FOREIGN KEY (id_tratamiento) REFERENCES Tratamientos(id_tratamiento),
    FOREIGN KEY (id_medicamento) REFERENCES Medicamentos(id_medicamento)
);

-- Tabla Liberaciones (depende de Animales y Empleados)
CREATE TABLE Liberaciones (
    id_liberacion NUMBER(10) PRIMARY KEY,
    id_animal NUMBER(10),
    fecha_liberacion DATE,
    lugar_liberacion VARCHAR2(150),
    observaciones VARCHAR2(300),
    id_rescatista NUMBER(10),
    FOREIGN KEY (id_animal) REFERENCES Animales(id_animal),
    FOREIGN KEY (id_rescatista) REFERENCES Empleados(id_empleado)
);

-- Tabla Seguimiento_Post_Liberacion (depende de Liberaciones y Empleados)
CREATE TABLE Seguimiento_Post_Liberacion (
    id_seguimiento NUMBER(10) PRIMARY KEY,
    id_liberacion NUMBER(10),
    fecha_seguimiento DATE,
    metodo_seguimiento VARCHAR2(50), -- GPS, cámaras trampa, etc
    estado_animal VARCHAR2(50), -- Adaptándose bien, con dificultades, etc
    ubicacion_avistamiento VARCHAR2(150),
    observaciones VARCHAR2(400),
    id_rescatista NUMBER(10),
    FOREIGN KEY (id_liberacion) REFERENCES Liberaciones(id_liberacion),
    FOREIGN KEY (id_rescatista) REFERENCES Empleados(id_empleado)
);

-- NUEVA tabla para observaciones de cuidadores (Cuidadores -> Liberaciones)
CREATE TABLE Observaciones_Cuidador (
    id_observacion NUMBER(10) PRIMARY KEY,
    id_tratamiento NUMBER(10) NOT NULL,
    id_cuidador NUMBER(10) NOT NULL,
    fecha_observacion DATE DEFAULT SYSDATE,
    observacion VARCHAR2(500) NOT NULL,
    estado_animal VARCHAR2(50) DEFAULT 'En cuidado', -- 'En cuidado', 'Listo para liberación'
    FOREIGN KEY (id_tratamiento) REFERENCES Tratamientos(id_tratamiento),
    FOREIGN KEY (id_cuidador) REFERENCES Empleados(id_empleado)
);

-- Constraint para validar estados permitidos
ALTER TABLE Observaciones_Cuidador 
ADD CONSTRAINT chk_estado_animal_cuidado 
CHECK (estado_animal IN ('En cuidado', 'Listo para liberación'));

-- Insertar algunos datos de ejemplo
INSERT INTO Observaciones_Cuidador (id_observacion, id_tratamiento, id_cuidador, observacion, estado_animal)
VALUES (1, 3, 3, 'Animal se está adaptando bien, come normalmente', 'En cuidado');

INSERT INTO Observaciones_Cuidador (id_observacion, id_tratamiento, id_cuidador, observacion, estado_animal)
VALUES (2, 3, 3, 'Animal está recuperado, se planea la liberación en 3 días', 'Listo para liberación');

-- Creacion de los roles (Rescatista, Veterinario y Cuidador)
INSERT INTO Roles (id_rol, nombre_rol) VALUES (1, 'Rescatista');
INSERT INTO Roles (id_rol, nombre_rol) VALUES (2, 'Veterinario');
INSERT INTO Roles (id_rol, nombre_rol) VALUES (3, 'Cuidador');

--Insertar un usuario de ejemplo a la tabla empleados
INSERT INTO Empleados (id_empleado, nombre, apellidos, telefono, correo, username, password_hash)
VALUES (
    1,
    'Laura',
    'Jiménez Rodríguez',
    '8888-1234',
    'laura.jimenez@example.com',
    'laujime',
    '123' 
);

-- Insercion de nuevo empleado (Veterinario)
INSERT INTO Empleados (id_empleado, nombre, apellidos, telefono, correo, username, password_hash)
VALUES (
    2,
    'Dr. Carlos',
    'Morales Vega',
    '8888-5678',
    'carlos.morales@centrorescate.com',
    'carmore',
    '456'
);

-- Insercion de nuevo empleado (Cuidador)
INSERT INTO Empleados (id_empleado, nombre, apellidos, telefono, correo, username, password_hash)
VALUES (
    3,
    'Ana María',
    'González Castro',
    '8888-9012',
    'ana.gonzalez@centrorescate.com',
    'anagon',
    '789'
);

-- Asignacion de roles a todos los empleados
-- Ya Laura Jiménez - Rescatista (Laura ya existia entonces solo tenemos que modificarla y asignarle el rol 1)
INSERT INTO Empleados_Roles (id_empleado, id_rol, nivel_acceso, zona_asignada, especialidad_medica, area_asignada, cargo)
VALUES (
    1, 1, 3, 'Zona Norte y Central', NULL, 'Campo - Rescate', 'Especialista en Rescate'
);

-- Dr. Carlos Morales - Veterinario
INSERT INTO Empleados_Roles (id_empleado, id_rol, nivel_acceso, zona_asignada, especialidad_medica, area_asignada, cargo)
VALUES (
    2, 2, 3, 'Centro de Rehabilitación', 'Medicina de Fauna Silvestre', 'Clínica Veterinaria', 'Veterinario Principal'
);

-- Ana María González - Cuidadora
INSERT INTO Empleados_Roles (id_empleado, id_rol, nivel_acceso, zona_asignada, especialidad_medica, area_asignada, cargo)
VALUES (
    3, 3, 2, 'Centro de Rehabilitación', NULL, 'Cuidados Intensivos', 'Cuidadora Senior'
);

--Insertar algunos elementos a la tabla rescate a nombre de Laura Jimenez
INSERT INTO Rescates (id_rescate, fecha_rescate, lugar, detalles, id_rescatista)
VALUES (
    101,
    TO_DATE('2024-11-12', 'YYYY-MM-DD'),
    'Bosque de los Niños, Alajuela',
    'Se encontró un mono con signos de desnutrición y una herida en la pata trasera.',
    1
);

INSERT INTO Rescates (id_rescate, fecha_rescate, lugar, detalles, id_rescatista)
VALUES (
    102,
    TO_DATE('2025-03-05', 'YYYY-MM-DD'),
    'Río Sixaola, frontera sur',
    'Un caimán joven atrapado en redes de pesca ilegales fue rescatado por el equipo.',
    1
);

INSERT INTO Rescates (id_rescate, fecha_rescate, lugar, detalles, id_rescatista)
VALUES (
    103,
    TO_DATE('2025-06-01', 'YYYY-MM-DD'),
    'Parque Nacional Corcovado',
    'Un tucán con fractura de ala fue trasladado para rehabilitación veterinaria.',
    1
);

-- Insercion de algunos animales para la tabla "animales"
INSERT INTO Animales (id_animal, nombre, id_especie, raza, edad, sexo, id_rescate)
VALUES (1, 'Mono Herido', 1, 'Congo', 3, 'Macho', 101);

INSERT INTO Animales (id_animal, nombre, id_especie, raza, edad, sexo, id_rescate)
VALUES (2, 'Caimán Joven', 9, NULL, 1, 'Hembra', 102);

INSERT INTO Animales (id_animal, nombre, id_especie, raza, edad, sexo, id_rescate)
VALUES (3, 'Tucán Lesionado', 2, NULL, 2, 'Macho', 103);

--Insercion de algunos animales a la tabla tratamiento, cada uno con un estado diferente
INSERT INTO Tratamientos (id_tratamiento, id_animal, id_veterinario, id_cuidador, fecha_inicio, fecha_fin, descripcion_tratamiento, observaciones_cuidado, estado_tratamiento)
VALUES (1, 1, 2, NULL, NULL, NULL, NULL, 'Animal recién rescatado, pendiente de evaluación veterinaria', 'PENDIENTE');

INSERT INTO Tratamientos (id_tratamiento, id_animal, id_veterinario, id_cuidador, fecha_inicio, fecha_fin, descripcion_tratamiento, observaciones_cuidado, estado_tratamiento)
VALUES (2, 2, 2, 3, SYSDATE-5, NULL, 'Tratamiento de herida en pata trasera, antibióticos y vendajes', 'Respondiendo bien al tratamiento', 'EN_TRATAMIENTO');

INSERT INTO Tratamientos (id_tratamiento, id_animal, id_veterinario, id_cuidador, fecha_inicio, fecha_fin, descripcion_tratamiento, observaciones_cuidado, estado_tratamiento)
VALUES (3, 3, 2, 3, SYSDATE-10, SYSDATE-2, 'Fractura de ala tratada con éxito, rehabilitación completa', 'Listo para cuidados básicos y preparación para liberación', 'COMPLETADO');

-- Insertar especies comunes de Costa Rica con nombres que incluyen nombre común en la tabla especies
INSERT INTO Especies (id_especie, nombre_cientifico, familia, habitat_natural, estado_conservacion, dieta) 
VALUES (1, 'Alouatta palliata (Mono)', 'Atelidae', 'Bosque tropical húmedo', 'Vulnerable', 'Herbívoro');

INSERT INTO Especies (id_especie, nombre_cientifico, familia, habitat_natural, estado_conservacion, dieta) 
VALUES (2, 'Ramphastos sulfuratus (Tucán Pico Iris)', 'Ramphastidae', 'Bosque húmedo tropical', 'Preocupación menor', 'Omnívoro');

INSERT INTO Especies (id_especie, nombre_cientifico, familia, habitat_natural, estado_conservacion, dieta) 
VALUES (3, 'Bradypus variegatus (Perezoso de Tres Dedos)', 'Bradypodidae', 'Bosque tropical', 'Preocupación menor', 'Herbívoro');

INSERT INTO Especies (id_especie, nombre_cientifico, familia, habitat_natural, estado_conservacion, dieta) 
VALUES (4, 'Potos flavus (Martilla)', 'Procyonidae', 'Bosque tropical', 'Preocupación menor', 'Omnívoro');

INSERT INTO Especies (id_especie, nombre_cientifico, familia, habitat_natural, estado_conservacion, dieta) 
VALUES (5, 'Nasua narica (Pizote)', 'Procyonidae', 'Bosque y áreas abiertas', 'Preocupación menor', 'Omnívoro');

INSERT INTO Especies (id_especie, nombre_cientifico, familia, habitat_natural, estado_conservacion, dieta) 
VALUES (6, 'Cebus imitator (Mono Cara Blanca)', 'Cebidae', 'Bosque húmedo y seco', 'Vulnerable', 'Omnívoro');

INSERT INTO Especies (id_especie, nombre_cientifico, familia, habitat_natural, estado_conservacion, dieta) 
VALUES (7, 'Iguana iguana (Iguana Verde)', 'Iguanidae', 'Bosque seco y húmedo', 'Preocupación menor', 'Herbívoro');

INSERT INTO Especies (id_especie, nombre_cientifico, familia, habitat_natural, estado_conservacion, dieta) 
VALUES (8, 'Ara macao (Guacamayo Rojo)', 'Psittacidae', 'Bosque húmedo tropical', 'En peligro', 'Herbívoro');

INSERT INTO Especies (id_especie, nombre_cientifico, familia, habitat_natural, estado_conservacion, dieta) 
VALUES (9, 'Crocodylus acutus (Cocodrilo)', 'Crocodylidae', 'Ríos y manglares', 'Vulnerable', 'Carnívoro');

INSERT INTO Especies (id_especie, nombre_cientifico, familia, habitat_natural, estado_conservacion, dieta) 
VALUES (10, 'Tayassu pecari (Chancho de Monte)', 'Tayassuidae', 'Bosque húmedo tropical', 'Vulnerable', 'Omnívoro');

INSERT INTO Especies (id_especie, nombre_cientifico, familia, habitat_natural, estado_conservacion, dieta) 
VALUES (11, 'Didelphis marsupialis (Zorro Pelón)', 'Didelphidae', 'Bosque y áreas urbanas', 'Preocupación menor', 'Omnívoro');

INSERT INTO Especies (id_especie, nombre_cientifico, familia, habitat_natural, estado_conservacion, dieta) 
VALUES (12, 'Chelonia mydas (Tortuga Verde)', 'Cheloniidae', 'Océano y costas', 'En peligro', 'Herbívoro');

INSERT INTO Especies (id_especie, nombre_cientifico, familia, habitat_natural, estado_conservacion, dieta) 
VALUES (13, 'Saimiri oerstedii (Mono Aullador)', 'Cebidae', 'Bosque húmedo costero', 'En peligro crítico', 'Omnívoro');

INSERT INTO Especies (id_especie, nombre_cientifico, familia, habitat_natural, estado_conservacion, dieta) 
VALUES (14, 'Pteroglossus torquatus (Tucancillo Collarejo)', 'Ramphastidae', 'Bosque húmedo', 'Preocupación menor', 'Omnívoro');

INSERT INTO Especies (id_especie, nombre_cientifico, familia, habitat_natural, estado_conservacion, dieta) 
VALUES (15, 'Leopardus pardalis (Ocelote)', 'Felidae', 'Bosque húmedo y seco', 'Preocupación menor', 'Carnívoro');

-- Insertar medicamentos para los aniamales. Divididos por tipos de medicamentos
-- Antibióticos
INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (1, 'Amoxicilina', 'Antibiótico', 50, TO_DATE('2026-03-15', 'YYYY-MM-DD'), 'VetSupply CR', 'Estante A1');

INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (2, 'Enrofloxacina', 'Antibiótico', 30, TO_DATE('2025-12-20', 'YYYY-MM-DD'), 'Farmacéuticos Unidos', 'Estante A2');

INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (3, 'Penicilina G', 'Antibiótico', 25, TO_DATE('2026-01-10', 'YYYY-MM-DD'), 'VetSupply CR', 'Refrigerador B1');

-- Analgésicos y Antiinflamatorios
INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (4, 'Meloxicam', 'Antiinflamatorio', 40, TO_DATE('2026-05-30', 'YYYY-MM-DD'), 'Farmacéuticos Unidos', 'Estante B3');

INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (5, 'Tramadol', 'Analgésico', 20, TO_DATE('2025-11-15', 'YYYY-MM-DD'), 'VetSupply CR', 'Caja Fuerte C1');

INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (6, 'Ketoprofeno', 'Antiinflamatorio', 35, TO_DATE('2026-02-28', 'YYYY-MM-DD'), 'Distribuidora Médica', 'Estante B2');

-- Sedantes y Tranquilizantes
INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (7, 'Xilazina', 'Sedante', 15, TO_DATE('2026-04-10', 'YYYY-MM-DD'), 'VetSupply CR', 'Caja Fuerte C2');

INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (8, 'Ketamina', 'Anestésico', 10, TO_DATE('2025-10-25', 'YYYY-MM-DD'), 'Farmacéuticos Unidos', 'Caja Fuerte C1');

-- Vitaminas y Suplementos
INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (9, 'Complejo Vitamínico B', 'Vitamina', 60, TO_DATE('2026-08-20', 'YYYY-MM-DD'), 'Distribuidora Médica', 'Estante D1');

INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (10, 'Vitamina C', 'Vitamina', 45, TO_DATE('2026-06-15', 'YYYY-MM-DD'), 'VetSupply CR', 'Estante D2');

INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (11, 'Calcio + Fósforo', 'Suplemento', 30, TO_DATE('2027-01-30', 'YYYY-MM-DD'), 'Farmacéuticos Unidos', 'Estante D3');

-- Antiparasitarios
INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (12, 'Ivermectina', 'Antiparasitario', 25, TO_DATE('2026-03-05', 'YYYY-MM-DD'), 'Distribuidora Médica', 'Estante E1');

INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (13, 'Fenbendazol', 'Antiparasitario', 20, TO_DATE('2025-12-10', 'YYYY-MM-DD'), 'VetSupply CR', 'Estante E2');

-- Tratamientos Tópicos
INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (14, 'Pomada Antibiótica', 'Tópico', 40, TO_DATE('2026-07-20', 'YYYY-MM-DD'), 'Farmacéuticos Unidos', 'Estante F1');

INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (15, 'Solución Antiséptica', 'Antiséptico', 55, TO_DATE('2026-09-10', 'YYYY-MM-DD'), 'Distribuidora Médica', 'Estante F2');

-- Fluidos y Electrolitos
INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (16, 'Suero Fisiológico', 'Fluido', 80, TO_DATE('2027-02-15', 'YYYY-MM-DD'), 'VetSupply CR', 'Estante G1');

INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (17, 'Lactato de Ringer', 'Fluido', 60, TO_DATE('2026-12-05', 'YYYY-MM-DD'), 'Farmacéuticos Unidos', 'Estante G2');

-- Medicamentos Especializados
INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (18, 'Dexametasona', 'Corticoide', 15, TO_DATE('2026-01-25', 'YYYY-MM-DD'), 'Distribuidora Médica', 'Refrigerador B2');

INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (19, 'Furosemida', 'Diurético', 20, TO_DATE('2025-11-30', 'YYYY-MM-DD'), 'VetSupply CR', 'Estante H1');

INSERT INTO Medicamentos (id_medicamento, nombre_medicamento, tipo_medicamento, stock_actual, fecha_vencimiento, proveedor, ubicacion_almacen)
VALUES (20, 'Omeprazol', 'Protector Gástrico', 35, TO_DATE('2026-04-20', 'YYYY-MM-DD'), 'Farmacéuticos Unidos', 'Estante H2');


-- TRIGGER: Crear tratamiento automático cuando se rescata un animal
CREATE OR REPLACE TRIGGER trg_crear_tratamiento_automatico
AFTER INSERT ON Animales
FOR EACH ROW
DECLARE
    v_next_tratamiento_id NUMBER;
BEGIN
    -- Obtener próximo ID de tratamiento
    SELECT NVL(MAX(id_tratamiento), 0) + 1 
    INTO v_next_tratamiento_id 
    FROM Tratamientos;
    
    -- Crear tratamiento automático en estado PENDIENTE
    INSERT INTO Tratamientos (
        id_tratamiento, 
        id_animal, 
        estado_tratamiento, 
        observaciones_cuidado
    ) VALUES (
        v_next_tratamiento_id,
        :NEW.id_animal,
        'PENDIENTE',
        'Tratamiento creado automáticamente tras rescate - Pendiente de evaluación veterinaria'
    );
    
    DBMS_OUTPUT.PUT_LINE('Tratamiento ID ' || v_next_tratamiento_id || 
                         ' creado automáticamente para animal ' || :NEW.nombre);
END;
/

-- TRIGGER: Log de cambios de estado en tratamientos
CREATE OR REPLACE TRIGGER trg_log_cambio_estado_tratamiento
AFTER UPDATE OF estado_tratamiento ON Tratamientos
FOR EACH ROW
WHEN (OLD.estado_tratamiento != NEW.estado_tratamiento)
BEGIN
    DBMS_OUTPUT.PUT_LINE('CAMBIO DE ESTADO - Tratamiento ID: ' || :NEW.id_tratamiento || 
                         ' | De: ' || :OLD.estado_tratamiento || 
                         ' | A: ' || :NEW.estado_tratamiento ||
                         ' | Fecha: ' || TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI'));
END;
/

-- 1. CURSOR: Generar reporte de animales por veterinario
CREATE OR REPLACE PROCEDURE sp_reporte_animales_por_veterinario AS
    CURSOR c_veterinarios IS
        SELECT DISTINCT 
            e.id_empleado,
            e.nombre || ' ' || e.apellidos as nombre_completo
        FROM Empleados e
        INNER JOIN Empleados_Roles er ON e.id_empleado = er.id_empleado
        WHERE er.id_rol = 2; -- Veterinarios

    CURSOR c_animales_veterinario(p_id_veterinario NUMBER) IS
        SELECT 
            a.nombre as nombre_animal,
            esp.nombre_cientifico,
            t.estado_tratamiento,
            t.fecha_inicio
        FROM Tratamientos t
        INNER JOIN Animales a ON t.id_animal = a.id_animal
        INNER JOIN Especies esp ON a.id_especie = esp.id_especie
        WHERE t.id_veterinario = p_id_veterinario
        ORDER BY t.fecha_inicio DESC;

    v_total_animales NUMBER := 0;
BEGIN
    DBMS_OUTPUT.PUT_LINE('=== REPORTE DE ANIMALES POR VETERINARIO ===');
    DBMS_OUTPUT.PUT_LINE('Fecha: ' || TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI'));
    DBMS_OUTPUT.PUT_LINE('');

    FOR veterinario IN c_veterinarios LOOP
        DBMS_OUTPUT.PUT_LINE('VETERINARIO: ' || veterinario.nombre_completo);
        DBMS_OUTPUT.PUT_LINE('----------------------------------------');
        
        v_total_animales := 0;
        
        FOR animal IN c_animales_veterinario(veterinario.id_empleado) LOOP
            v_total_animales := v_total_animales + 1;
            DBMS_OUTPUT.PUT_LINE('  ' || v_total_animales || '. ' || animal.nombre_animal || 
                               ' (' || animal.nombre_cientifico || ')');
            DBMS_OUTPUT.PUT_LINE('     Estado: ' || animal.estado_tratamiento || 
                               ' | Inicio: ' || TO_CHAR(animal.fecha_inicio, 'DD/MM/YYYY'));
        END LOOP;
        
        IF v_total_animales = 0 THEN
            DBMS_OUTPUT.PUT_LINE('  No hay animales asignados');
        ELSE
            DBMS_OUTPUT.PUT_LINE('  TOTAL ANIMALES: ' || v_total_animales);
        END IF;
        
        DBMS_OUTPUT.PUT_LINE('');
    END LOOP;
END;
/

-- CURSOR: Seguimiento de liberaciones pendientes
CREATE OR REPLACE PROCEDURE sp_liberaciones_sin_seguimiento AS
    CURSOR c_liberaciones_sin_seguimiento IS
        SELECT 
            l.id_liberacion,
            a.nombre as nombre_animal,
            esp.nombre_cientifico,
            l.fecha_liberacion,
            l.lugar_liberacion,
            e.nombre || ' ' || e.apellidos as rescatista,
            TRUNC(SYSDATE - l.fecha_liberacion) as dias_sin_seguimiento
        FROM Liberaciones l
        INNER JOIN Animales a ON l.id_animal = a.id_animal
        INNER JOIN Especies esp ON a.id_especie = esp.id_especie
        INNER JOIN Empleados e ON l.id_rescatista = e.id_empleado
        WHERE NOT EXISTS (
            SELECT 1 FROM Seguimiento_Post_Liberacion spl 
            WHERE spl.id_liberacion = l.id_liberacion
        )
        AND l.fecha_liberacion < SYSDATE - 7  -- Liberados hace más de 7 días
        ORDER BY l.fecha_liberacion;

    v_contador NUMBER := 0;
BEGIN
    DBMS_OUTPUT.PUT_LINE('=== LIBERACIONES SIN SEGUIMIENTO ===');
    DBMS_OUTPUT.PUT_LINE('Fecha consulta: ' || TO_CHAR(SYSDATE, 'DD/MM/YYYY'));
    DBMS_OUTPUT.PUT_LINE('');

    FOR liberacion IN c_liberaciones_sin_seguimiento LOOP
        v_contador := v_contador + 1;
        
        DBMS_OUTPUT.PUT_LINE(v_contador || '. ' || liberacion.nombre_animal || 
                           ' (' || liberacion.nombre_cientifico || ')');
        DBMS_OUTPUT.PUT_LINE('   Liberado: ' || TO_CHAR(liberacion.fecha_liberacion, 'DD/MM/YYYY') || 
                           ' en ' || liberacion.lugar_liberacion);
        DBMS_OUTPUT.PUT_LINE('   Rescatista: ' || liberacion.rescatista);
        DBMS_OUTPUT.PUT_LINE('   Días sin seguimiento: ' || liberacion.dias_sin_seguimiento);
        
        IF liberacion.dias_sin_seguimiento > 30 THEN
            DBMS_OUTPUT.PUT_LINE('   *** URGENTE: Más de 30 días sin seguimiento ***');
        ELSIF liberacion.dias_sin_seguimiento > 15 THEN
            DBMS_OUTPUT.PUT_LINE('   ** ATENCIÓN: Más de 15 días sin seguimiento **');
        END IF;
        
        DBMS_OUTPUT.PUT_LINE('');
    END LOOP;

    IF v_contador = 0 THEN
        DBMS_OUTPUT.PUT_LINE('✓ Todas las liberaciones tienen seguimiento adecuado');
    ELSE
        DBMS_OUTPUT.PUT_LINE('TOTAL LIBERACIONES PENDIENTES: ' || v_contador);
    END IF;
END;
/

-- CURSOR: Estado actual del centro de rescate
CREATE OR REPLACE PROCEDURE sp_estado_centro_rescate AS
    CURSOR c_estadisticas IS
        SELECT 
            COUNT(CASE WHEN t.estado_tratamiento = 'PENDIENTE' THEN 1 END) as pendientes,
            COUNT(CASE WHEN t.estado_tratamiento = 'EN_TRATAMIENTO' THEN 1 END) as en_tratamiento,
            COUNT(CASE WHEN t.estado_tratamiento = 'COMPLETADO' THEN 1 END) as completados
        FROM Tratamientos t;

    CURSOR c_medicamentos_criticos IS
        SELECT nombre_medicamento, stock_actual
        FROM Medicamentos
        WHERE stock_actual <= 10
        ORDER BY stock_actual;

    v_pendientes NUMBER;
    v_en_tratamiento NUMBER;
    v_completados NUMBER;
    v_total_liberaciones NUMBER;
BEGIN
    DBMS_OUTPUT.PUT_LINE('=== ESTADO DEL CENTRO DE RESCATE ===');
    DBMS_OUTPUT.PUT_LINE('Fecha: ' || TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI'));
    DBMS_OUTPUT.PUT_LINE('');

    -- Estadísticas de tratamientos
    OPEN c_estadisticas;
    FETCH c_estadisticas INTO v_pendientes, v_en_tratamiento, v_completados;
    CLOSE c_estadisticas;

    DBMS_OUTPUT.PUT_LINE('TRATAMIENTOS:');
    DBMS_OUTPUT.PUT_LINE('  Pendientes de evaluación: ' || v_pendientes);
    DBMS_OUTPUT.PUT_LINE('  En tratamiento activo: ' || v_en_tratamiento);
    DBMS_OUTPUT.PUT_LINE('  Completados: ' || v_completados);
    
    -- Total de liberaciones
    SELECT COUNT(*) INTO v_total_liberaciones FROM Liberaciones;
    DBMS_OUTPUT.PUT_LINE('  Animales liberados: ' || v_total_liberaciones);
    DBMS_OUTPUT.PUT_LINE('');

    -- Medicamentos con stock crítico
    DBMS_OUTPUT.PUT_LINE('MEDICAMENTOS CON STOCK CRÍTICO (≤10):');
    FOR medicamento IN c_medicamentos_criticos LOOP
        DBMS_OUTPUT.PUT_LINE('  ⚠ ' || medicamento.nombre_medicamento || 
                           ': ' || medicamento.stock_actual || ' unidades');
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('');
    DBMS_OUTPUT.PUT_LINE('=== FIN DEL REPORTE ===');
END;
/

-- Expresion Regular: Extraer ubicación específica de lugares de rescate
CREATE OR REPLACE FUNCTION fn_extraer_provincia(p_lugar VARCHAR2) RETURN VARCHAR2 IS
    v_provincia VARCHAR2(50);
BEGIN
    -- Buscar provincias de Costa Rica en el texto
    CASE 
        WHEN REGEXP_LIKE(p_lugar, 'San José|San Jose', 'i') THEN v_provincia := 'San José';
        WHEN REGEXP_LIKE(p_lugar, 'Alajuela', 'i') THEN v_provincia := 'Alajuela';
        WHEN REGEXP_LIKE(p_lugar, 'Cartago', 'i') THEN v_provincia := 'Cartago';
        WHEN REGEXP_LIKE(p_lugar, 'Heredia', 'i') THEN v_provincia := 'Heredia';
        WHEN REGEXP_LIKE(p_lugar, 'Guanacaste', 'i') THEN v_provincia := 'Guanacaste';
        WHEN REGEXP_LIKE(p_lugar, 'Puntarenas', 'i') THEN v_provincia := 'Puntarenas';
        WHEN REGEXP_LIKE(p_lugar, 'Limón|Limon', 'i') THEN v_provincia := 'Limón';
        ELSE v_provincia := 'No identificada';
    END CASE;
    
    RETURN v_provincia;
END;
/

-- Ejemplo de uso de la función
SELECT 
    id_rescate,
    lugar,
    fn_extraer_provincia(lugar) as provincia_identificada
FROM Rescates;


-- Expresion Regular: Extraer información de diagnósticos médicos
SELECT 
    id_estado_salud,
    diagnostico as diagnostico_original,
    -- Buscar palabras clave médicas
    CASE 
        WHEN REGEXP_LIKE(diagnostico, 'fractura|quebrado|roto', 'i') THEN 'FRACTURA'
        WHEN REGEXP_LIKE(diagnostico, 'herida|cortada|lesión', 'i') THEN 'HERIDA'
        WHEN REGEXP_LIKE(diagnostico, 'infección|bacteria|virus', 'i') THEN 'INFECCIÓN'
        WHEN REGEXP_LIKE(diagnostico, 'desnutrición|delgado|peso', 'i') THEN 'DESNUTRICIÓN'
        ELSE 'OTRO'
    END as categoria_diagnostico,
    -- Extraer números (posible edad, peso, etc.)
    REGEXP_SUBSTR(diagnostico, '[0-9]+') as numero_encontrado,
    -- Limpiar caracteres especiales para reporte
    REGEXP_REPLACE(diagnostico, '[^A-Za-z0-9áéíóúñÑ\s]', '') as diagnostico_limpio
FROM Estados_Salud
WHERE diagnostico IS NOT NULL;


COMMIT;